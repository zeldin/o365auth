#!/usr/bin/env python3

import sys
import msal
import argparse
import atexit
import base64
import os

clientid = "b7230c62-6fda-4fad-bea6-0b9dd2013d05"
clientsecret = "fim8Q~Nvjq4AATOPiXXW2GozNpAeUGwZa1YXYa7p"

conf = {
    "authority": "https://login.microsoftonline.com/organizations",
    "client_id": clientid,
    "client_secret": clientsecret,
    "scope": ['https://outlook.office365.com/.default'],
    "token_cache": "~/.o365tokencache",
    "auth_code_flow": True
}

def get_access_token(conf):

    token_cache = None
    if conf.get("token_cache"):
        fn = os.path.expanduser(conf['token_cache'])
        token_cache = msal.SerializableTokenCache()
        if os.path.exists(fn):
            with open(fn, "r") as f:
                token_cache.deserialize(f.read())
        atexit.register(lambda:
                        open(fn, "w").write(token_cache.serialize())
                        if token_cache.has_state_changed else None)

    if conf.get("client_secret"):
        app = msal.ConfidentialClientApplication(conf['client_id'], client_credential=conf["client_secret"], authority=conf['authority'], token_cache=token_cache)
    else:
        app = msal.PublicClientApplication(conf['client_id'], authority=conf['authority'], token_cache=token_cache)

    acc = app.get_accounts(username=conf['login'])
    if acc:
        result = app.acquire_token_silent(scopes=conf['scope'],
                                          account=acc[0])
        if result and "access_token" in result:
            return result

    if conf.get("auth_code_flow"):
        with msal.oauth2cli.AuthCodeReceiver() as receiver:
            flow = app.initiate_auth_code_flow(scopes=conf['scope'],
                                               redirect_uri="http://localhost:%d" %
                                               (receiver.get_port(),),
                                               login_hint=conf.get('login'))
            auth_response = receiver.get_auth_response(auth_uri=flow['auth_uri'],
                                                       state=flow['state'])
            return app.acquire_token_by_auth_code_flow(flow, auth_response,
                                                       scopes=conf['scope'])
    return app.acquire_token_by_username_password(conf['login'], conf['password'], scopes=conf['scope'])

def generate_auth_string(user, token):
    return f"user={user}\x01auth=Bearer {token}\x01\x01"    

def parse_authinfo(filename):
    with open(filename) as f:
        for line in f:
            line = line.strip().split()
            attrs = {}
            for key, value in zip(line[0::2], line[1::2]):
                attrs[key] = value
            yield attrs

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('--machine')
    parser.add_argument('--user')
    parser.add_argument('--password')
    args = parser.parse_args()
    conf['machine'] = args.machine
    conf['login'] = args.user
    conf['password'] = args.password

    if conf['machine']:
        for attrs in parse_authinfo(os.path.expanduser('~/.authinfo')):
            if attrs.get('machine') == conf['machine']:
                conf["login"] = attrs.get('login')
                conf["password"] = attrs.get('password')
                break
        if not conf.get('password') or not conf.get('password'):
            print('Missing login or password for machine %s' % (conf['machine'],), file=sys.stderr)
            sys.exit(1)

    if not conf.get('password') or not conf.get('password'):
        print('Missing login or password')
        sys.exit(1)
            
    result = get_access_token(conf)

    if "access_token" in result:
        auth_string = generate_auth_string(conf["login"],
                                           result['access_token'])
        print(base64.b64encode(auth_string.encode("utf-8")).decode('ascii'))
    else:
        print("Error: %s" % (result.get("error"),), file=sys.stderr)
        print(result.get("error_description"), file=sys.stderr)
        print(result.get("correlation_id"), file=sys.stderr)
        sys.exit(1)
